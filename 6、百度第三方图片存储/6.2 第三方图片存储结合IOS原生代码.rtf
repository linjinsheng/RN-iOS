{\rtf1\ansi\ansicpg936\cocoartf1671\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 Consolas;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red38\green38\blue38;
\red15\green114\blue1;\red40\green82\blue135;\red3\green37\blue83;\red109\green109\blue109;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000;\cssrgb\c20000\c20000\c20000;
\cssrgb\c0\c50980\c0;\cssrgb\c20000\c40000\c60000;\cssrgb\c0\c20000\c40000;\cssrgb\c50196\c50196\c50196;}
\paperw11900\paperh16840\margl1440\margr1440\vieww21660\viewh12220\viewkind0
\deftab720
\pard\pardeftab720\sl400\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 - (void)selectMethod:(NSInteger)selectTag\{\cf4 \strokec4 \
\'a0\'a0\cf5 \strokec5 // selectTag 0
\f1 \'a1\'a2\'c5\'c4\'d5\'d5
\f0  1
\f1 \'a1\'a2\'cf\'e0\'b2\'e1\'b5\'a5\'d1\'a1
\f0  2
\f1 \'a1\'a2\'cf\'e0\'b2\'e1\'b6\'e0\'d1\'a1
\f0 \cf4 \strokec4 \
\'a0\'a0\'a0\
\'a0\'a0\cf2 \strokec2 _myArray = [[NSMutableArray alloc]init];\cf4 \strokec4 \
\'a0\'a0\'a0\
\'a0\'a0\cf5 \strokec5 //
\f1 \'d0\'c2\'bd\'a8
\f0 BosClient\cf4 \strokec4 \
\'a0\'a0\cf2 \strokec2 BCECredentials* credentials = [[BCECredentials alloc] init];\cf4 \strokec4 \
\'a0\'a0\cf2 \strokec2 credentials.accessKey = accessKey;\cf4 \strokec4 \
\'a0\'a0\cf2 \strokec2 credentials.secretKey = secretKey;\cf4 \strokec4 \
\'a0\'a0\'a0\
\'a0\'a0\cf2 \strokec2 BOSClientConfiguration* configuration = [[BOSClientConfiguration alloc] init];\cf4 \strokec4 \
\'a0\'a0\cf2 \strokec2 configuration.endpoint = bucketUrl;\cf4 \strokec4 \
\'a0\'a0\cf2 \strokec2 configuration.credentials = credentials;\cf4 \strokec4 \
\'a0\'a0\cf2 \strokec2 client = [[BOSClient alloc] initWithConfiguration:configuration];\cf4 \strokec4 \
\'a0\'a0\'a0\
\'a0\'a0\cf5 \strokec5 //
\f1 \'d0\'c2\'bd\'a8
\f0 Bucket\cf4 \strokec4 \
\'a0\'a0\cf2 \strokec2 BCETask* task = [client putBucket:bucketName];\cf4 \strokec4 \
\'a0\'a0\cf2 \strokec2 task.then(^(BCEOutput* output) \{\'a0\cf5 \strokec5 // 
\f1 \'c8\'ce\'ce\'f1\'bf\'c9\'d2\'d4\'d2\'ec\'b2\'bd\'d6\'b4\'d0\'d0\'a1\'a3
\f0 \cf4 \strokec4 \
\'a0\'a0\'a0\'a0\cf6 \strokec6 if\cf4 \strokec4 \'a0\cf2 \strokec2 (output.response) \{\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\'a0\'a0\cf5 \strokec5 // 
\f1 \'c8\'ce\'ce\'f1\'d6\'b4\'d0\'d0\'b3\'c9\'b9\'a6\'a1\'a3
\f0 \cf4 \strokec4 \
\'a0\'a0\'a0\'a0\'a0\'a0\cf2 \strokec2 NSLog(@\cf7 \strokec7 "Bucket
\f1 \'d6\'b4\'d0\'d0\'b3\'c9\'b9\'a6\'c3\'e8\'ca\'f6
\f0 %@"\cf2 \strokec2 , output.response);\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\cf2 \strokec2 \}\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\cf6 \strokec6 if\cf4 \strokec4 \'a0\cf2 \strokec2 (output.error) \{\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\'a0\'a0\cf5 \strokec5 // 
\f1 \'c8\'ce\'ce\'f1\'d6\'b4\'d0\'d0\'ca\'a7\'b0\'dc\'a1\'a3
\f0 \cf4 \strokec4 \
\'a0\'a0\'a0\'a0\'a0\'a0\cf2 \strokec2 NSLog(@\cf7 \strokec7 "Bucket
\f1 \'d6\'b4\'d0\'d0\'ca\'a7\'b0\'dc\'c3\'e8\'ca\'f6
\f0 %@"\cf2 \strokec2 , output.error);\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\cf2 \strokec2 \}\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\cf6 \strokec6 if\cf4 \strokec4 \'a0\cf2 \strokec2 (output.progress) \{\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\'a0\'a0\cf5 \strokec5 // 
\f1 \'c8\'ce\'ce\'f1\'d6\'b4\'d0\'d0\'bd\'f8\'b6\'c8\'a1\'a3
\f0 \cf4 \strokec4 \
\'a0\'a0\'a0\'a0\'a0\'a0\cf2 \strokec2 NSLog(@\cf7 \strokec7 "Bucket
\f1 \'d6\'b4\'d0\'d0\'bd\'f8\'b6\'c8\'c3\'e8\'ca\'f6
\f0 %@"\cf2 \strokec2 , output.progress);\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\cf2 \strokec2 \}\cf4 \strokec4 \
\'a0\'a0\cf2 \strokec2 \});\cf4 \strokec4 \
\'a0\'a0\cf2 \strokec2 [task waitUtilFinished];\'a0\cf5 \strokec5 // 
\f1 \'bf\'c9\'d2\'d4\'cd\'ac\'b2\'bd\'b7\'bd\'ca\'bd\'a3\'ac\'b5\'c8\'b4\'fd\'c8\'ce\'ce\'f1\'d6\'b4\'d0\'d0\'cd\'ea\'b1\'cf\'a1\'a3
\f0 \cf4 \strokec4 \
\'a0\'a0\'a0\
\'a0\'a0\cf6 \strokec6 if\cf2 \strokec2 (selectTag != 2)\{\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\cf2 \strokec2 UIImagePickerController *imagePicker = [[UIImagePickerController alloc] init];\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\cf2 \strokec2 imagePicker.delegate = self;\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\cf2 \strokec2 imagePicker.allowsEditing = YES;\'a0\cf5 \strokec5 //
\f1 \'d4\'ca\'d0\'ed\'b1\'e0\'bc\'ad
\f0 \cf4 \strokec4 \
\'a0\'a0\'a0\'a0\cf6 \strokec6 if\cf2 \strokec2 (selectTag == 0)\{\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\'a0\'a0\cf5 \strokec5 //
\f1 \'c5\'c4\'d5\'d5
\f0 \cf4 \strokec4 \
\'a0\'a0\'a0\'a0\'a0\'a0\cf2 \strokec2 BOOL isCamera = [UIImagePickerController isCameraDeviceAvailable:UIImagePickerControllerCameraDeviceFront|\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf2 \strokec2 UIImagePickerControllerCameraDeviceRear];\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\'a0\'a0\cf6 \strokec6 if\cf4 \strokec4 \'a0\cf2 \strokec2 (!isCamera) \{\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf2 \strokec2 NSLog(@\cf7 \strokec7 "
\f1 \'c3\'bb\'d3\'d0\'cf\'e0\'bb\'fa
\f0 "\cf2 \strokec2 );\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf5 \strokec5 //\'a0\'a0\'a0\'a0\'a0 [Tools showTipsWithHUD:@"
\f1 \'c3\'bb\'d3\'d0\'c9\'e3\'cf\'f1\'cd\'b7
\f0 " showTime:1.0f];\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf6 \strokec6 return\cf2 \strokec2 ;\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\'a0\'a0\cf2 \strokec2 \}\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\'a0\'a0\cf2 \strokec2 imagePicker.sourceType = UIImagePickerControllerSourceTypeCamera;\'a0\'a0\cf5 \strokec5 //
\f1 \'c9\'e3\'cf\'f1\'cd\'b7
\f0 \cf4 \strokec4 \
\'a0\'a0\'a0\'a0\cf2 \strokec2 \}\cf6 \strokec6 else\cf4 \strokec4 \'a0\cf6 \strokec6 if\cf2 \strokec2 (selectTag == 1)\{\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\'a0\'a0\cf5 \strokec5 //
\f1 \'b4\'d3\'cf\'e0\'b2\'e1\'d6\'d0\'d1\'a1\'d4\'f1
\f0 \cf4 \strokec4 \
\'a0\'a0\'a0\'a0\'a0\'a0\cf2 \strokec2 imagePicker.sourceType = UIImagePickerControllerSourceTypePhotoLibrary;\'a0\cf5 \strokec5 //
\f1 \'cf\'e0\'b2\'e1
\f0 \cf4 \strokec4 \
\'a0\'a0\'a0\'a0\cf2 \strokec2 \}\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\cf2 \strokec2 UIViewController *topRootViewController = [[UIApplication\'a0 sharedApplication] keyWindow].rootViewController;\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\cf5 \strokec5 // 
\f1 \'d4\'da\'d5\'e2\'c0\'ef\'bc\'d3\'d2\'bb\'b8\'f6\'d5\'e2\'b8\'f6\'d1\'f9\'ca\'bd\'b5\'c4\'d1\'ad\'bb\'b7
\f0 \cf4 \strokec4 \
\'a0\'a0\'a0\'a0\cf6 \strokec6 while\cf4 \strokec4 \'a0\cf2 \strokec2 (topRootViewController.presentedViewController)\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\cf2 \strokec2 \{\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\'a0\'a0\cf5 \strokec5 // 
\f1 \'d5\'e2\'c0\'ef\'b9\'cc\'b6\'a8\'d0\'b4\'b7\'a8
\f0 \cf4 \strokec4 \
\'a0\'a0\'a0\'a0\'a0\'a0\cf2 \strokec2 topRootViewController = topRootViewController.presentedViewController;\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\cf2 \strokec2 \}\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\cf5 \strokec5 // 
\f1 \'c8\'bb\'ba\'f3\'d4\'d9\'bd\'f8\'d0\'d0
\f0 present
\f1 \'b2\'d9\'d7\'f7
\f0 \cf4 \strokec4 \
\'a0\'a0\'a0\'a0\cf2 \strokec2 [topRootViewController presentViewController:imagePicker animated:YES completion:nil];\cf4 \strokec4 \
\'a0\'a0\cf2 \strokec2 \}\cf4 \strokec4 \
\cf2 \strokec2 \}\cf4 \strokec4 \
\'a0\
\cf8 \strokec8 #pragma mark -- UIImagePickerController delegate\cf4 \strokec4 \
\cf2 \strokec2 - (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info\cf4 \strokec4 \
\cf2 \strokec2 \{\cf4 \strokec4 \
\'a0\'a0\cf2 \strokec2 UIImage *pickerImage = [info objectForKey:UIImagePickerControllerEditedImage];\cf4 \strokec4 \
\'a0\'a0\cf2 \strokec2 NSLog(@\cf7 \strokec7 "before--%@"\cf2 \strokec2 ,pickerImage);\cf4 \strokec4 \
\'a0\'a0\cf2 \strokec2 NSLog(@\cf7 \strokec7 "before--%f----%f"\cf2 \strokec2 ,pickerImage.size.height,pickerImage.size.width);\cf4 \strokec4 \
\'a0\'a0\'a0\
\'a0\'a0\cf2 \strokec2 UIGraphicsBeginImageContext(CGSizeMake(200, 200));\cf5 \strokec5 //
\f1 \'bb\'e6\'d6\'c6\'cd\'bc\'c6\'ac\'b4\'f3\'d0\'a1
\f0 \cf4 \strokec4 \
\'a0\'a0\cf2 \strokec2 [pickerImage drawInRect:CGRectMake(0, 0, 200, 200)];\'a0\cf5 \strokec5 //
\f1 \'b4\'d3\'b5\'b1\'c7\'b0
\f0 context
\f1 \'d6\'d0\'b4\'b4\'bd\'a8\'d2\'bb\'b8\'f6\'b8\'c4\'b1\'e4\'b4\'f3\'d0\'a1\'ba\'f3\'b5\'c4\'cd\'bc
\f0 \cf4 \strokec4 \
\'a0\'a0\cf2 \strokec2 pickerImage = UIGraphicsGetImageFromCurrentImageContext();\'a0\cf5 \strokec5 //
\f1 \'ca\'b9\'b5\'b1\'c7\'b0
\f0 context
\f1 \'b3\'f6\'b6\'d1\'d5\'bb
\f0 \cf4 \strokec4 \
\'a0\'a0\cf2 \strokec2 UIGraphicsEndImageContext();\cf4 \strokec4 \
\'a0\'a0\'a0\
\'a0\'a0\cf2 \strokec2 NSLog(@\cf7 \strokec7 "after--%f----%f"\cf2 \strokec2 ,pickerImage.size.height,pickerImage.size.width);\cf4 \strokec4 \
\'a0\'a0\'a0\
\'a0\'a0\cf2 \strokec2 NSData *data;\cf4 \strokec4 \
\'a0\'a0\cf2 \strokec2 NSString *houzhui;\cf4 \strokec4 \
\'a0\'a0\'a0\
\'a0\'a0\cf5 \strokec5 //
\f1 \'c5\'d0\'b6\'cf\'ca\'c7
\f0 png 
\f1 \'bb\'b9\'ca\'c7
\f0  jpg
\f1 \'cd\'bc\'c6\'ac
\f0 \cf4 \strokec4 \
\'a0\'a0\cf6 \strokec6 if\cf4 \strokec4 \'a0\cf2 \strokec2 (UIImagePNGRepresentation(pickerImage)) \{\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\cf2 \strokec2 houzhui = @\cf7 \strokec7 ".png"\cf2 \strokec2 ;\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\cf2 \strokec2 data = UIImagePNGRepresentation(pickerImage);\cf4 \strokec4 \
\'a0\'a0\cf2 \strokec2 \}\cf6 \strokec6 else\cf2 \strokec2 \{\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\cf2 \strokec2 houzhui = @\cf7 \strokec7 ".jpg"\cf2 \strokec2 ;\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\cf2 \strokec2 data = UIImageJPEGRepresentation(pickerImage, 1.0);\cf4 \strokec4 \
\'a0\'a0\cf2 \strokec2 \}\cf4 \strokec4 \
\'a0\'a0\'a0\
\'a0\'a0\cf2 \strokec2 NSArray *paths = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES);\cf4 \strokec4 \
\'a0\'a0\cf2 \strokec2 NSString *documentsDirectory = [paths objectAtIndex:0];\cf4 \strokec4 \
\'a0\'a0\cf2 \strokec2 NSString *fileD = [documentsDirectory stringByAppendingPathComponent:\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf2 \strokec2 [NSString stringWithFormat:@\cf7 \strokec7 "user%@"\cf2 \strokec2 ,houzhui]];\cf4 \strokec4 \
\'a0\'a0\'a0\
\'a0\'a0\cf2 \strokec2 NSFileManager *manager = [NSFileManager defaultManager];\cf4 \strokec4 \
\'a0\'a0\cf6 \strokec6 if\cf4 \strokec4 \'a0\cf2 \strokec2 ([manager isExecutableFileAtPath:fileD] ==\'a0\cf6 \strokec6 false\cf2 \strokec2 ) \{\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\cf5 \strokec5 //
\f1 \'b0\'d1\'cd\'bc\'c6\'ac
\f0 nsdata
\f1 \'d0\'b4\'c8\'eb\'ce\'c4\'bc\'fe
\f0 \cf4 \strokec4 \
\'a0\'a0\'a0\'a0\cf2 \strokec2 dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^\{\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\'a0\'a0\cf2 \strokec2 [data writeToFile:fileD atomically:YES];\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\cf2 \strokec2 \});\cf4 \strokec4 \
\'a0\'a0\cf2 \strokec2 \}\cf4 \strokec4 \
\'a0\'a0\'a0\
\'a0\'a0\cf2 \strokec2 BOSObjectContent* content = [[BOSObjectContent alloc] init];\cf4 \strokec4 \
\'a0\'a0\'a0\
\'a0\'a0\cf5 \strokec5 // 
\f1 \'d2\'d4\'b6\'fe\'bd\'f8\'d6\'c6\'ca\'fd\'be\'dd\'b7\'bd\'ca\'bd
\f0 \cf4 \strokec4 \
\'a0\'a0\cf2 \strokec2 content.objectData.data = data;\cf4 \strokec4 \
\'a0\'a0\'a0\
\'a0\'a0\cf2 \strokec2 NSString *uuidString = [[NSUUID UUID] UUIDString];\cf4 \strokec4 \
\'a0\'a0\cf2 \strokec2 NSLog(@\cf7 \strokec7 "uuid
\f1 \'b5\'c4\'d6\'b5\'ce\'aa
\f0 %@"\cf2 \strokec2 , uuidString);\cf4 \strokec4 \
\'a0\'a0\'a0\
\'a0\'a0\cf2 \strokec2 NSString *contentType = @\cf7 \strokec7 "image/png"\cf2 \strokec2 ;\cf4 \strokec4 \
\'a0\'a0\cf6 \strokec6 if\cf2 \strokec2 ([houzhui isEqual: @\cf7 \strokec7 ".png"\cf2 \strokec2 ])\{\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\cf2 \strokec2 contentType = @\cf7 \strokec7 "image/png"\cf2 \strokec2 ;\cf4 \strokec4 \
\'a0\'a0\cf2 \strokec2 \}\cf6 \strokec6 else\cf4 \strokec4 \'a0\cf6 \strokec6 if\cf2 \strokec2 ([houzhui isEqual: @\cf7 \strokec7 ".jpg"\cf2 \strokec2 ])\{\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\cf2 \strokec2 contentType = @\cf7 \strokec7 "image/jpeg"\cf2 \strokec2 ;\cf4 \strokec4 \
\'a0\'a0\cf2 \strokec2 \}\cf4 \strokec4 \
\'a0\'a0\'a0\
\'a0\'a0\cf2 \strokec2 BOSObjectMetadata* metadata = [[BOSObjectMetadata alloc] init];\cf4 \strokec4 \
\'a0\'a0\cf2 \strokec2 metadata.contentType = contentType;\cf4 \strokec4 \
\'a0\'a0\cf2 \strokec2 content.metadata = metadata;\cf4 \strokec4 \
\'a0\'a0\'a0\
\'a0\'a0\cf2 \strokec2 NSString *picName = [NSString stringWithFormat:@\cf7 \strokec7 "%@%@"\cf2 \strokec2 , uuidString,houzhui];\cf4 \strokec4 \
\'a0\'a0\cf2 \strokec2 NSLog(@\cf7 \strokec7 "picName
\f1 \'ce\'aa
\f0 %@"\cf2 \strokec2 , picName);\cf4 \strokec4 \
\'a0\'a0\'a0\
\'a0\'a0\cf2 \strokec2 BOSPutObjectRequest* request = [[BOSPutObjectRequest alloc] init];\cf4 \strokec4 \
\'a0\'a0\cf2 \strokec2 request.bucket = bucketName;\cf4 \strokec4 \
\'a0\'a0\cf2 \strokec2 request.key = picName;\cf4 \strokec4 \
\'a0\'a0\cf2 \strokec2 request.objectContent = content;\cf4 \strokec4 \
\'a0\'a0\'a0\
\'a0\'a0\cf2 \strokec2 __block BOSPutObjectResponse* response = nil;\cf4 \strokec4 \
\'a0\'a0\'a0\
\'a0\'a0\cf2 \strokec2 BCETask* taskTwo = [client putObject:request];\cf4 \strokec4 \
\'a0\'a0\cf2 \strokec2 taskTwo.then(^(BCEOutput* output) \{\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\cf6 \strokec6 if\cf4 \strokec4 \'a0\cf2 \strokec2 (output.progress) \{\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\'a0\'a0\cf2 \strokec2 NSLog(@\cf7 \strokec7 "put object progress is %@"\cf2 \strokec2 , output.progress);\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\cf2 \strokec2 \}\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\cf6 \strokec6 if\cf4 \strokec4 \'a0\cf2 \strokec2 (output.response) \{\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\'a0\'a0\cf2 \strokec2 response = (BOSPutObjectResponse*)output.response;\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\'a0\'a0\cf2 \strokec2 NSLog(@\cf7 \strokec7 "put object success!"\cf2 \strokec2 );\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\cf2 \strokec2 \}\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\cf6 \strokec6 if\cf4 \strokec4 \'a0\cf2 \strokec2 (output.error) \{\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\'a0\'a0\cf2 \strokec2 NSLog(@\cf7 \strokec7 "put object failure"\cf2 \strokec2 );\cf4 \strokec4 \
\'a0\'a0\'a0\'a0\cf2 \strokec2 \}\cf4 \strokec4 \
\'a0\'a0\cf2 \strokec2 \});\cf4 \strokec4 \
\'a0\'a0\'a0\
\'a0\'a0\cf2 \strokec2 [taskTwo waitUtilFinished];\cf4 \strokec4 \
\'a0\'a0\'a0\
\'a0\'a0\cf2 \strokec2 NSString *picUrl =[NSString stringWithFormat:@\cf7 \strokec7 "%@%@%@%@%@"\cf2 \strokec2 , bucketUrl, versionString,bucketName,separatorString,picName];\cf4 \strokec4 \
\'a0\'a0\cf2 \strokec2 NSLog(@\cf7 \strokec7 "picUrl
\f1 \'ce\'aa
\f0 %@"\cf2 \strokec2 ,picUrl);\cf4 \strokec4 \
\'a0\'a0\'a0\
\'a0\'a0\cf5 \strokec5 //
\f1 \'c9\'cf\'b4\'ab\'b5\'bd\'b0\'d9\'b6\'c8\'d4\'c6\'b4\'e6\'b4\'a2
\f0 ,
\f1 \'d0\'e8\'d2\'aa\'b7\'a2\'b3\'f6\'d2\'bb\'b8\'f6\'cd\'a8\'d6\'aa
\f0 \cf4 \strokec4 \
\'a0\'a0\cf2 \strokec2 [[NSNotificationCenter defaultCenter] postNotificationName:@\cf7 \strokec7 "sendCustomEventNotification"\cf4 \strokec4 \'a0\cf2 \strokec2 object:nil userInfo:@\{@\cf7 \strokec7 "picUrl"\cf2 \strokec2 :picUrl\}];\cf4 \strokec4 \
\'a0\'a0\'a0\
\'a0\'a0\cf2 \strokec2 [picker dismissViewControllerAnimated:YES completion:^\{\cf4 \strokec4 \
\'a0\'a0\cf2 \strokec2 NSLog(@\cf7 \strokec7 "imagePicker
\f1 \'cd\'cb\'b3\'f6
\f0 "\cf2 \strokec2 );\cf4 \strokec4 \
\'a0\'a0\cf2 \strokec2 \}];\cf4 \strokec4 \
\'a0\'a0\'a0\
\cf2 \strokec2 \}\cf4 \strokec4 \
}